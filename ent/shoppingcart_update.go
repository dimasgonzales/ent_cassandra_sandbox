// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"ent_cassandra_sandbox/ent/predicate"
	"ent_cassandra_sandbox/ent/shoppingcart"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ShoppingCartUpdate is the builder for updating ShoppingCart entities.
type ShoppingCartUpdate struct {
	config
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// Where appends a list predicates to the ShoppingCartUpdate builder.
func (scu *ShoppingCartUpdate) Where(ps ...predicate.ShoppingCart) *ShoppingCartUpdate {
	scu.mutation.Where(ps...)
	return scu
}

// SetItemCount sets the "item_count" field.
func (scu *ShoppingCartUpdate) SetItemCount(i int) *ShoppingCartUpdate {
	scu.mutation.ResetItemCount()
	scu.mutation.SetItemCount(i)
	return scu
}

// SetNillableItemCount sets the "item_count" field if the given value is not nil.
func (scu *ShoppingCartUpdate) SetNillableItemCount(i *int) *ShoppingCartUpdate {
	if i != nil {
		scu.SetItemCount(*i)
	}
	return scu
}

// AddItemCount adds i to the "item_count" field.
func (scu *ShoppingCartUpdate) AddItemCount(i int) *ShoppingCartUpdate {
	scu.mutation.AddItemCount(i)
	return scu
}

// SetLastUpdateTimestamp sets the "last_update_timestamp" field.
func (scu *ShoppingCartUpdate) SetLastUpdateTimestamp(t time.Time) *ShoppingCartUpdate {
	scu.mutation.SetLastUpdateTimestamp(t)
	return scu
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scu *ShoppingCartUpdate) Mutation() *ShoppingCartMutation {
	return scu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (scu *ShoppingCartUpdate) Save(ctx context.Context) (int, error) {
	scu.defaults()
	return withHooks(ctx, scu.sqlSave, scu.mutation, scu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scu *ShoppingCartUpdate) SaveX(ctx context.Context) int {
	affected, err := scu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (scu *ShoppingCartUpdate) Exec(ctx context.Context) error {
	_, err := scu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scu *ShoppingCartUpdate) ExecX(ctx context.Context) {
	if err := scu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scu *ShoppingCartUpdate) defaults() {
	if _, ok := scu.mutation.LastUpdateTimestamp(); !ok {
		v := shoppingcart.UpdateDefaultLastUpdateTimestamp()
		scu.mutation.SetLastUpdateTimestamp(v)
	}
}

func (scu *ShoppingCartUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoppingcart.Table, shoppingcart.Columns, sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt))
	if ps := scu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scu.mutation.ItemCount(); ok {
		_spec.SetField(shoppingcart.FieldItemCount, field.TypeInt, value)
	}
	if value, ok := scu.mutation.AddedItemCount(); ok {
		_spec.AddField(shoppingcart.FieldItemCount, field.TypeInt, value)
	}
	if value, ok := scu.mutation.LastUpdateTimestamp(); ok {
		_spec.SetField(shoppingcart.FieldLastUpdateTimestamp, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, scu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	scu.mutation.done = true
	return n, nil
}

// ShoppingCartUpdateOne is the builder for updating a single ShoppingCart entity.
type ShoppingCartUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ShoppingCartMutation
}

// SetItemCount sets the "item_count" field.
func (scuo *ShoppingCartUpdateOne) SetItemCount(i int) *ShoppingCartUpdateOne {
	scuo.mutation.ResetItemCount()
	scuo.mutation.SetItemCount(i)
	return scuo
}

// SetNillableItemCount sets the "item_count" field if the given value is not nil.
func (scuo *ShoppingCartUpdateOne) SetNillableItemCount(i *int) *ShoppingCartUpdateOne {
	if i != nil {
		scuo.SetItemCount(*i)
	}
	return scuo
}

// AddItemCount adds i to the "item_count" field.
func (scuo *ShoppingCartUpdateOne) AddItemCount(i int) *ShoppingCartUpdateOne {
	scuo.mutation.AddItemCount(i)
	return scuo
}

// SetLastUpdateTimestamp sets the "last_update_timestamp" field.
func (scuo *ShoppingCartUpdateOne) SetLastUpdateTimestamp(t time.Time) *ShoppingCartUpdateOne {
	scuo.mutation.SetLastUpdateTimestamp(t)
	return scuo
}

// Mutation returns the ShoppingCartMutation object of the builder.
func (scuo *ShoppingCartUpdateOne) Mutation() *ShoppingCartMutation {
	return scuo.mutation
}

// Where appends a list predicates to the ShoppingCartUpdate builder.
func (scuo *ShoppingCartUpdateOne) Where(ps ...predicate.ShoppingCart) *ShoppingCartUpdateOne {
	scuo.mutation.Where(ps...)
	return scuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (scuo *ShoppingCartUpdateOne) Select(field string, fields ...string) *ShoppingCartUpdateOne {
	scuo.fields = append([]string{field}, fields...)
	return scuo
}

// Save executes the query and returns the updated ShoppingCart entity.
func (scuo *ShoppingCartUpdateOne) Save(ctx context.Context) (*ShoppingCart, error) {
	scuo.defaults()
	return withHooks(ctx, scuo.sqlSave, scuo.mutation, scuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) SaveX(ctx context.Context) *ShoppingCart {
	node, err := scuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (scuo *ShoppingCartUpdateOne) Exec(ctx context.Context) error {
	_, err := scuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scuo *ShoppingCartUpdateOne) ExecX(ctx context.Context) {
	if err := scuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scuo *ShoppingCartUpdateOne) defaults() {
	if _, ok := scuo.mutation.LastUpdateTimestamp(); !ok {
		v := shoppingcart.UpdateDefaultLastUpdateTimestamp()
		scuo.mutation.SetLastUpdateTimestamp(v)
	}
}

func (scuo *ShoppingCartUpdateOne) sqlSave(ctx context.Context) (_node *ShoppingCart, err error) {
	_spec := sqlgraph.NewUpdateSpec(shoppingcart.Table, shoppingcart.Columns, sqlgraph.NewFieldSpec(shoppingcart.FieldID, field.TypeInt))
	id, ok := scuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ShoppingCart.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := scuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, shoppingcart.FieldID)
		for _, f := range fields {
			if !shoppingcart.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != shoppingcart.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := scuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := scuo.mutation.ItemCount(); ok {
		_spec.SetField(shoppingcart.FieldItemCount, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.AddedItemCount(); ok {
		_spec.AddField(shoppingcart.FieldItemCount, field.TypeInt, value)
	}
	if value, ok := scuo.mutation.LastUpdateTimestamp(); ok {
		_spec.SetField(shoppingcart.FieldLastUpdateTimestamp, field.TypeTime, value)
	}
	_node = &ShoppingCart{config: scuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, scuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{shoppingcart.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	scuo.mutation.done = true
	return _node, nil
}
