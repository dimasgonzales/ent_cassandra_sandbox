// Code generated by ent, DO NOT EDIT.

package shoppingcart

import (
	"ent_cassandra_sandbox/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLTE(FieldID, id))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldUserID, v))
}

// ItemCount applies equality check predicate on the "item_count" field. It's identical to ItemCountEQ.
func ItemCount(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldItemCount, v))
}

// LastUpdateTimestamp applies equality check predicate on the "last_update_timestamp" field. It's identical to LastUpdateTimestampEQ.
func LastUpdateTimestamp(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldLastUpdateTimestamp, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldContainsFold(FieldUserID, v))
}

// ItemCountEQ applies the EQ predicate on the "item_count" field.
func ItemCountEQ(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldItemCount, v))
}

// ItemCountNEQ applies the NEQ predicate on the "item_count" field.
func ItemCountNEQ(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldItemCount, v))
}

// ItemCountIn applies the In predicate on the "item_count" field.
func ItemCountIn(vs ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldItemCount, vs...))
}

// ItemCountNotIn applies the NotIn predicate on the "item_count" field.
func ItemCountNotIn(vs ...int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldItemCount, vs...))
}

// ItemCountGT applies the GT predicate on the "item_count" field.
func ItemCountGT(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGT(FieldItemCount, v))
}

// ItemCountGTE applies the GTE predicate on the "item_count" field.
func ItemCountGTE(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGTE(FieldItemCount, v))
}

// ItemCountLT applies the LT predicate on the "item_count" field.
func ItemCountLT(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLT(FieldItemCount, v))
}

// ItemCountLTE applies the LTE predicate on the "item_count" field.
func ItemCountLTE(v int) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLTE(FieldItemCount, v))
}

// LastUpdateTimestampEQ applies the EQ predicate on the "last_update_timestamp" field.
func LastUpdateTimestampEQ(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldEQ(FieldLastUpdateTimestamp, v))
}

// LastUpdateTimestampNEQ applies the NEQ predicate on the "last_update_timestamp" field.
func LastUpdateTimestampNEQ(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNEQ(FieldLastUpdateTimestamp, v))
}

// LastUpdateTimestampIn applies the In predicate on the "last_update_timestamp" field.
func LastUpdateTimestampIn(vs ...time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldIn(FieldLastUpdateTimestamp, vs...))
}

// LastUpdateTimestampNotIn applies the NotIn predicate on the "last_update_timestamp" field.
func LastUpdateTimestampNotIn(vs ...time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldNotIn(FieldLastUpdateTimestamp, vs...))
}

// LastUpdateTimestampGT applies the GT predicate on the "last_update_timestamp" field.
func LastUpdateTimestampGT(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGT(FieldLastUpdateTimestamp, v))
}

// LastUpdateTimestampGTE applies the GTE predicate on the "last_update_timestamp" field.
func LastUpdateTimestampGTE(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldGTE(FieldLastUpdateTimestamp, v))
}

// LastUpdateTimestampLT applies the LT predicate on the "last_update_timestamp" field.
func LastUpdateTimestampLT(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLT(FieldLastUpdateTimestamp, v))
}

// LastUpdateTimestampLTE applies the LTE predicate on the "last_update_timestamp" field.
func LastUpdateTimestampLTE(v time.Time) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.FieldLTE(FieldLastUpdateTimestamp, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ShoppingCart) predicate.ShoppingCart {
	return predicate.ShoppingCart(sql.NotPredicates(p))
}
